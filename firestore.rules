rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write;
    }
    match /games/{game} {
      allow read: if canReadGame()
      allow delete: if false;
      allow create, update: if canUpdateGame()
    }

    function isLoggedIn () {
      return request.auth != null;
    }
    
    function canReadGame(){
      let isPlayer = request.auth.uid in request.resource.data.players;
      return isLoggedIn() && isPlayer;
    }
    
    function canUpdateGame(){
      let isOwner = request.auth.uid in request.resource.data.owners;
      return isLoggedIn() && isOwner;
    }
    
    match /games/{game}/rolls/{roll} {
     	allow read;
      allow create: if isLoggedIn();
      allow update: if false;
    }

    function canPlayGame(database, gameId){
      let game = get(/databases/$(database)/documents/games/$(gameId));
      return isLoggedIn() && isPlayer(request.auth.uid, game);
    }

    function isPlayer(uid, game){
      return uid in game.data.players || uid in game.data.owners;
    }

    match /users/{uid} {
      allow read: if true
      allow create: if request.auth.uid == uid;
      allow update, delete: if request.auth.uid == uid;
    }
  }
}