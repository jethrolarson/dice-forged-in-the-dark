rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isLoggedIn() {
      return request.auth != null;
    }

    function isOwner(uid, gameData) {
      return uid in gameData.owners;
    }

    function canCreateGame() {
      // `request.auth.uid in request.resource.data.owners` checks whether the UID
      // of the user trying to create the game is included in the owners field of
      // the new game data being submitted.
      return isLoggedIn() && request.auth.uid in request.resource.data.owners;
    }

    function canUpdateGame() {
      return isLoggedIn() && isOwner(request.auth.uid, resource.data);
    }

    // Rules for /games/{game}
    match /games/{game} {
      allow read: if isLoggedIn();
      allow create: if canCreateGame();
      allow update: if canUpdateGame();
      allow delete: if false;
    }

    // Rules for /games/{game}/rolls/{roll}
    match /games/{game}/rolls/{roll} {
      allow read: if isLoggedIn();
      allow create: if isLoggedIn();
      allow update, delete: if false;
    }

    // Rules for /users/{uid}
    match /users/{uid} {
      allow read: if true;
      allow create: if request.auth.uid == uid;
      allow update: if request.auth.uid == uid;
      allow delete: if false;
    }
  }
}
